#define pi 3.1415926535897932385f

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}
//turning this into a float hit
float hitSphere(in vec4 rayDirection, in vec4 rayOrigin, float radius, vec3 center)
{
    vec3 dist = rayOrigin.xyz - center;
    float lengths = length(rayDirection);
    float a = lengths * lengths;
    float half_b = dot(dist, rayDirection.xyz);
    lengths = length(dist);
    float c = lengths * lengths - radius * radius;
    float doesHit = half_b * half_b - a * c;
    
    if(doesHit < 0.0)
    {
        return -1.0;
    }
    else
    {
        return (-half_b - sqrt(doesHit) / a);
    }
}



//closest to making a class we will get with GLSL

struct sRay
{
    vec4 origin;
    vec4 direction;

};

//initialize our ray struct
sRay newRay(in vec3 origin, in vec3 direction)
{
    sRay ray;
    ray.origin = vec4(origin, 1.0);
    ray.direction = vec4(direction, 0.0);
    return ray;
}

//calculate a point along a ray and return it.
vec4 atRay(float distAlongRay, sRay ray)
{
    return ray.origin + distAlongRay * ray.direction;
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out sRay ray, in vec2 viewport, in float focalLength)
{
    ray = newRay(vec3(0.0), vec3(viewport, -focalLength));
}


// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in sRay ray)
{
//    vec3 unit_direction = rayDirection
    //return normalized color if within our sphere shown by if vari > 0.0.
    float vari = hitSphere(ray.direction, ray.origin,0.5f, vec3(0,0,-1));
    if (vari > 0.0)
    {
        vec3 normal = vec3(atRay(vari, ray));
        return vec4(0.5 * vec3(normal.x + 1.0, normal.y + 1.0, normal.z + 1.0), 1.0);
    }
// our formula for lerp is still (1.0 - t) * white(starting color) + t * blue(ending color).
    vec4 blue = vec4(0.5,0.7,1.0,1.0);
    vec4 white = vec4(1.0,1.0,1.0,1.0);
    float t = 0.5f * (ray.direction.y + 1.0f);
    return (1.0 - t) * white + t * blue;
}





// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    sRay ray;
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(ray,viewport, focalLength);


    // color
    fragColor = calcColor(ray);

}